// Code generated by MockGen. DO NOT EDIT.
// Source: crypto_watch_client.go

// Package providers is a generated GoMock package.
package providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICryptoWatchClient is a mock of ICryptoWatchClient interface.
type MockICryptoWatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockICryptoWatchClientMockRecorder
}

// MockICryptoWatchClientMockRecorder is the mock recorder for MockICryptoWatchClient.
type MockICryptoWatchClientMockRecorder struct {
	mock *MockICryptoWatchClient
}

// NewMockICryptoWatchClient creates a new mock instance.
func NewMockICryptoWatchClient(ctrl *gomock.Controller) *MockICryptoWatchClient {
	mock := &MockICryptoWatchClient{ctrl: ctrl}
	mock.recorder = &MockICryptoWatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICryptoWatchClient) EXPECT() *MockICryptoWatchClientMockRecorder {
	return m.recorder
}

// GetPrice mocks base method.
func (m *MockICryptoWatchClient) GetPrice(exchange, pair string) (*Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", exchange, pair)
	ret0, _ := ret[0].(*Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockICryptoWatchClientMockRecorder) GetPrice(exchange, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockICryptoWatchClient)(nil).GetPrice), exchange, pair)
}
